# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ocs2_msgs/resetRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ocs2_msgs.msg

class resetRequest(genpy.Message):
  _md5sum = "7759e1cea687346062f2674a13fe14ee"
  _type = "ocs2_msgs/resetRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Reset service 
bool                      reset
mpc_target_trajectories   targetTrajectories

================================================================================
MSG: ocs2_msgs/mpc_target_trajectories
# MPC target trajectories

float64[]    timeTrajectory        # MPC target time trajectory
mpc_state[]  stateTrajectory       # MPC target state trajectory
mpc_input[]  inputTrajectory       # MPC target input trajectory


================================================================================
MSG: ocs2_msgs/mpc_state
# MPC internal model state vector
float32[] value

================================================================================
MSG: ocs2_msgs/mpc_input
# MPC internal model input vector 

float32[] value"""
  __slots__ = ['reset','targetTrajectories']
  _slot_types = ['bool','ocs2_msgs/mpc_target_trajectories']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       reset,targetTrajectories

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(resetRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.reset is None:
        self.reset = False
      if self.targetTrajectories is None:
        self.targetTrajectories = ocs2_msgs.msg.mpc_target_trajectories()
    else:
      self.reset = False
      self.targetTrajectories = ocs2_msgs.msg.mpc_target_trajectories()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.reset
      buff.write(_get_struct_B().pack(_x))
      length = len(self.targetTrajectories.timeTrajectory)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.targetTrajectories.timeTrajectory))
      length = len(self.targetTrajectories.stateTrajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.targetTrajectories.stateTrajectory:
        length = len(val1.value)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.value))
      length = len(self.targetTrajectories.inputTrajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.targetTrajectories.inputTrajectory:
        length = len(val1.value)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.targetTrajectories is None:
        self.targetTrajectories = ocs2_msgs.msg.mpc_target_trajectories()
      end = 0
      start = end
      end += 1
      (self.reset,) = _get_struct_B().unpack(str[start:end])
      self.reset = bool(self.reset)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.targetTrajectories.timeTrajectory = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.targetTrajectories.stateTrajectory = []
      for i in range(0, length):
        val1 = ocs2_msgs.msg.mpc_state()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.value = s.unpack(str[start:end])
        self.targetTrajectories.stateTrajectory.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.targetTrajectories.inputTrajectory = []
      for i in range(0, length):
        val1 = ocs2_msgs.msg.mpc_input()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.value = s.unpack(str[start:end])
        self.targetTrajectories.inputTrajectory.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.reset
      buff.write(_get_struct_B().pack(_x))
      length = len(self.targetTrajectories.timeTrajectory)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.targetTrajectories.timeTrajectory.tostring())
      length = len(self.targetTrajectories.stateTrajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.targetTrajectories.stateTrajectory:
        length = len(val1.value)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.value.tostring())
      length = len(self.targetTrajectories.inputTrajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.targetTrajectories.inputTrajectory:
        length = len(val1.value)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.value.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.targetTrajectories is None:
        self.targetTrajectories = ocs2_msgs.msg.mpc_target_trajectories()
      end = 0
      start = end
      end += 1
      (self.reset,) = _get_struct_B().unpack(str[start:end])
      self.reset = bool(self.reset)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.targetTrajectories.timeTrajectory = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.targetTrajectories.stateTrajectory = []
      for i in range(0, length):
        val1 = ocs2_msgs.msg.mpc_state()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.value = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.targetTrajectories.stateTrajectory.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.targetTrajectories.inputTrajectory = []
      for i in range(0, length):
        val1 = ocs2_msgs.msg.mpc_input()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.value = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.targetTrajectories.inputTrajectory.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ocs2_msgs/resetResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class resetResponse(genpy.Message):
  _md5sum = "89bb254424e4cffedbf494e7b0ddbfea"
  _type = "ocs2_msgs/resetResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool                      done
"""
  __slots__ = ['done']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       done

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(resetResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.done is None:
        self.done = False
    else:
      self.done = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.done
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.done,) = _get_struct_B().unpack(str[start:end])
      self.done = bool(self.done)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.done
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.done,) = _get_struct_B().unpack(str[start:end])
      self.done = bool(self.done)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class reset(object):
  _type          = 'ocs2_msgs/reset'
  _md5sum = '5d381de3cef01856decae8f3f4a35b69'
  _request_class  = resetRequest
  _response_class = resetResponse
