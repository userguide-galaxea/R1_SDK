# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from localization_msg/LocLocalization.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import localization_msg.msg
import std_msgs.msg

class LocLocalization(genpy.Message):
  _md5sum = "c3be4520cb40af3402a4a89303299b76"
  _type = "localization_msg/LocLocalization"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
LocLocalizationMeta meta
LocPosition position
LocVelocity velocity
LocAngularVelocity angular_velocity
LocOrientation orientation
LocAcceleration acceleration
LocPositionStd position_std
LocVelocityStd velocity_std
LocAngularVelocityStd angular_velocity_std
LocOrientationStd orientation_std
LocAccelerationStd acceleration_std
LocStatus status
LocTransform transform
LocPoseDetail pose_detail
LocRoadLaneIdInfo road_lane_id_info
LocReserved reserved
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: localization_msg/LocLocalizationMeta
uint64 timestamp_us
uint64 seq
================================================================================
MSG: localization_msg/LocPosition
uint8 available
LocPosGlobal position_global
LocPosLocal position_local
================================================================================
MSG: localization_msg/LocPosGlobal
float64 x
float64 y
float64 z
================================================================================
MSG: localization_msg/LocPosLocal
float64 x
float64 y
float64 z
================================================================================
MSG: localization_msg/LocVelocity
uint8 available
LocVelGlobal velocity_global
LocVelLocal velocity_local
================================================================================
MSG: localization_msg/LocVelGlobal
float64 ve
float64 vn
float64 vu
================================================================================
MSG: localization_msg/LocVelLocal
float64 vx
float64 vy
float64 vz
================================================================================
MSG: localization_msg/LocAngularVelocity
uint8 available
LocAngVelLocal angvelocity_local
================================================================================
MSG: localization_msg/LocAngVelLocal
float64 vx
float64 vy
float64 vz
================================================================================
MSG: localization_msg/LocOrientation
uint8 available
LocEuler euler_global
LocQuaternion quaternion_global
LocEuler euler_local
LocQuaternion quaternion_local
================================================================================
MSG: localization_msg/LocEuler
float64 roll
float64 pitch
float64 yaw
================================================================================
MSG: localization_msg/LocQuaternion
float64 w
float64 x
float64 y
float64 z
================================================================================
MSG: localization_msg/LocAcceleration
uint8 available
LocAccGlobal acceleration_global
LocAccLocal acceleration_local
================================================================================
MSG: localization_msg/LocAccGlobal
float64 ae
float64 an
float64 au
================================================================================
MSG: localization_msg/LocAccLocal
float64 ax
float64 ay
float64 az
================================================================================
MSG: localization_msg/LocPositionStd
uint8 available
LocPosStdGlobal pos_std_global
LocPosStdLocal pos_std_local
================================================================================
MSG: localization_msg/LocPosStdGlobal
float64 std_pe
float64 std_pn
float64 std_pu
================================================================================
MSG: localization_msg/LocPosStdLocal
float64 std_px
float64 std_py
float64 std_pz
================================================================================
MSG: localization_msg/LocVelocityStd
uint8 available
LocVelStdGlobal vel_std_global
LocVelStdLocal vel_std_local
================================================================================
MSG: localization_msg/LocVelStdGlobal
float64 std_ve
float64 std_vn
float64 std_vu
================================================================================
MSG: localization_msg/LocVelStdLocal
float64 std_vx
float64 std_vy
float64 std_vz
================================================================================
MSG: localization_msg/LocAngularVelocityStd
uint8 available
LocAngVelStdLocal angvel_std_local
================================================================================
MSG: localization_msg/LocAngVelStdLocal
float64 std_vx
float64 std_vy
float64 std_vz
================================================================================
MSG: localization_msg/LocOrientationStd
uint8 available
LocOriStdXyz ori_std_xyz
================================================================================
MSG: localization_msg/LocOriStdXyz
float64 std_faix
float64 std_faiy
float64 std_faiz
================================================================================
MSG: localization_msg/LocAccelerationStd
uint8 available
LocAccStdGlobal acc_std_global
LocAccStdLocal acc_std_local
================================================================================
MSG: localization_msg/LocAccStdGlobal
float64 std_ae
float64 std_an
float64 std_au
================================================================================
MSG: localization_msg/LocAccStdLocal
float64 std_ax
float64 std_ay
float64 std_az
================================================================================
MSG: localization_msg/LocStatus
uint8 available
LocStatusInfo status_info
================================================================================
MSG: localization_msg/LocStatusInfo
uint8 quality
uint64 common
uint64 extended
uint8 type
================================================================================
MSG: localization_msg/LocTransform
uint8 available
LocTransformInfo transform_llh_to_boot
LocTransformInfo transform_avp_map_to_boot
LocTransformInfo transform_ego_motion_to_boot
================================================================================
MSG: localization_msg/LocTransformInfo
LocQuaternion transform_q
LocPosLocal transform_t
LocPosGlobal transform_center
================================================================================
MSG: localization_msg/LocPoseDetail
uint8 available
LocPoseDetailInfo pose_detail_info
================================================================================
MSG: localization_msg/LocPoseDetailInfo
uint8 available
bool is_keyframe
bool has_scale
uint8 pose_type
================================================================================
MSG: localization_msg/LocRoadLaneIdInfo
uint16 ur_id
uint32 tile_id
uint32 road_count
uint32 lane_id
uint16 reserved
================================================================================
MSG: localization_msg/LocReserved
uint8 available
uint64[] reserved_data"""
  __slots__ = ['header','meta','position','velocity','angular_velocity','orientation','acceleration','position_std','velocity_std','angular_velocity_std','orientation_std','acceleration_std','status','transform','pose_detail','road_lane_id_info','reserved']
  _slot_types = ['std_msgs/Header','localization_msg/LocLocalizationMeta','localization_msg/LocPosition','localization_msg/LocVelocity','localization_msg/LocAngularVelocity','localization_msg/LocOrientation','localization_msg/LocAcceleration','localization_msg/LocPositionStd','localization_msg/LocVelocityStd','localization_msg/LocAngularVelocityStd','localization_msg/LocOrientationStd','localization_msg/LocAccelerationStd','localization_msg/LocStatus','localization_msg/LocTransform','localization_msg/LocPoseDetail','localization_msg/LocRoadLaneIdInfo','localization_msg/LocReserved']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,meta,position,velocity,angular_velocity,orientation,acceleration,position_std,velocity_std,angular_velocity_std,orientation_std,acceleration_std,status,transform,pose_detail,road_lane_id_info,reserved

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LocLocalization, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.meta is None:
        self.meta = localization_msg.msg.LocLocalizationMeta()
      if self.position is None:
        self.position = localization_msg.msg.LocPosition()
      if self.velocity is None:
        self.velocity = localization_msg.msg.LocVelocity()
      if self.angular_velocity is None:
        self.angular_velocity = localization_msg.msg.LocAngularVelocity()
      if self.orientation is None:
        self.orientation = localization_msg.msg.LocOrientation()
      if self.acceleration is None:
        self.acceleration = localization_msg.msg.LocAcceleration()
      if self.position_std is None:
        self.position_std = localization_msg.msg.LocPositionStd()
      if self.velocity_std is None:
        self.velocity_std = localization_msg.msg.LocVelocityStd()
      if self.angular_velocity_std is None:
        self.angular_velocity_std = localization_msg.msg.LocAngularVelocityStd()
      if self.orientation_std is None:
        self.orientation_std = localization_msg.msg.LocOrientationStd()
      if self.acceleration_std is None:
        self.acceleration_std = localization_msg.msg.LocAccelerationStd()
      if self.status is None:
        self.status = localization_msg.msg.LocStatus()
      if self.transform is None:
        self.transform = localization_msg.msg.LocTransform()
      if self.pose_detail is None:
        self.pose_detail = localization_msg.msg.LocPoseDetail()
      if self.road_lane_id_info is None:
        self.road_lane_id_info = localization_msg.msg.LocRoadLaneIdInfo()
      if self.reserved is None:
        self.reserved = localization_msg.msg.LocReserved()
    else:
      self.header = std_msgs.msg.Header()
      self.meta = localization_msg.msg.LocLocalizationMeta()
      self.position = localization_msg.msg.LocPosition()
      self.velocity = localization_msg.msg.LocVelocity()
      self.angular_velocity = localization_msg.msg.LocAngularVelocity()
      self.orientation = localization_msg.msg.LocOrientation()
      self.acceleration = localization_msg.msg.LocAcceleration()
      self.position_std = localization_msg.msg.LocPositionStd()
      self.velocity_std = localization_msg.msg.LocVelocityStd()
      self.angular_velocity_std = localization_msg.msg.LocAngularVelocityStd()
      self.orientation_std = localization_msg.msg.LocOrientationStd()
      self.acceleration_std = localization_msg.msg.LocAccelerationStd()
      self.status = localization_msg.msg.LocStatus()
      self.transform = localization_msg.msg.LocTransform()
      self.pose_detail = localization_msg.msg.LocPoseDetail()
      self.road_lane_id_info = localization_msg.msg.LocRoadLaneIdInfo()
      self.reserved = localization_msg.msg.LocReserved()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2QB6dB6dB3dB14dB6dB6dB6dB3dB3dB6d2B2Q2B30d5BH3IHB().pack(_x.meta.timestamp_us, _x.meta.seq, _x.position.available, _x.position.position_global.x, _x.position.position_global.y, _x.position.position_global.z, _x.position.position_local.x, _x.position.position_local.y, _x.position.position_local.z, _x.velocity.available, _x.velocity.velocity_global.ve, _x.velocity.velocity_global.vn, _x.velocity.velocity_global.vu, _x.velocity.velocity_local.vx, _x.velocity.velocity_local.vy, _x.velocity.velocity_local.vz, _x.angular_velocity.available, _x.angular_velocity.angvelocity_local.vx, _x.angular_velocity.angvelocity_local.vy, _x.angular_velocity.angvelocity_local.vz, _x.orientation.available, _x.orientation.euler_global.roll, _x.orientation.euler_global.pitch, _x.orientation.euler_global.yaw, _x.orientation.quaternion_global.w, _x.orientation.quaternion_global.x, _x.orientation.quaternion_global.y, _x.orientation.quaternion_global.z, _x.orientation.euler_local.roll, _x.orientation.euler_local.pitch, _x.orientation.euler_local.yaw, _x.orientation.quaternion_local.w, _x.orientation.quaternion_local.x, _x.orientation.quaternion_local.y, _x.orientation.quaternion_local.z, _x.acceleration.available, _x.acceleration.acceleration_global.ae, _x.acceleration.acceleration_global.an, _x.acceleration.acceleration_global.au, _x.acceleration.acceleration_local.ax, _x.acceleration.acceleration_local.ay, _x.acceleration.acceleration_local.az, _x.position_std.available, _x.position_std.pos_std_global.std_pe, _x.position_std.pos_std_global.std_pn, _x.position_std.pos_std_global.std_pu, _x.position_std.pos_std_local.std_px, _x.position_std.pos_std_local.std_py, _x.position_std.pos_std_local.std_pz, _x.velocity_std.available, _x.velocity_std.vel_std_global.std_ve, _x.velocity_std.vel_std_global.std_vn, _x.velocity_std.vel_std_global.std_vu, _x.velocity_std.vel_std_local.std_vx, _x.velocity_std.vel_std_local.std_vy, _x.velocity_std.vel_std_local.std_vz, _x.angular_velocity_std.available, _x.angular_velocity_std.angvel_std_local.std_vx, _x.angular_velocity_std.angvel_std_local.std_vy, _x.angular_velocity_std.angvel_std_local.std_vz, _x.orientation_std.available, _x.orientation_std.ori_std_xyz.std_faix, _x.orientation_std.ori_std_xyz.std_faiy, _x.orientation_std.ori_std_xyz.std_faiz, _x.acceleration_std.available, _x.acceleration_std.acc_std_global.std_ae, _x.acceleration_std.acc_std_global.std_an, _x.acceleration_std.acc_std_global.std_au, _x.acceleration_std.acc_std_local.std_ax, _x.acceleration_std.acc_std_local.std_ay, _x.acceleration_std.acc_std_local.std_az, _x.status.available, _x.status.status_info.quality, _x.status.status_info.common, _x.status.status_info.extended, _x.status.status_info.type, _x.transform.available, _x.transform.transform_llh_to_boot.transform_q.w, _x.transform.transform_llh_to_boot.transform_q.x, _x.transform.transform_llh_to_boot.transform_q.y, _x.transform.transform_llh_to_boot.transform_q.z, _x.transform.transform_llh_to_boot.transform_t.x, _x.transform.transform_llh_to_boot.transform_t.y, _x.transform.transform_llh_to_boot.transform_t.z, _x.transform.transform_llh_to_boot.transform_center.x, _x.transform.transform_llh_to_boot.transform_center.y, _x.transform.transform_llh_to_boot.transform_center.z, _x.transform.transform_avp_map_to_boot.transform_q.w, _x.transform.transform_avp_map_to_boot.transform_q.x, _x.transform.transform_avp_map_to_boot.transform_q.y, _x.transform.transform_avp_map_to_boot.transform_q.z, _x.transform.transform_avp_map_to_boot.transform_t.x, _x.transform.transform_avp_map_to_boot.transform_t.y, _x.transform.transform_avp_map_to_boot.transform_t.z, _x.transform.transform_avp_map_to_boot.transform_center.x, _x.transform.transform_avp_map_to_boot.transform_center.y, _x.transform.transform_avp_map_to_boot.transform_center.z, _x.transform.transform_ego_motion_to_boot.transform_q.w, _x.transform.transform_ego_motion_to_boot.transform_q.x, _x.transform.transform_ego_motion_to_boot.transform_q.y, _x.transform.transform_ego_motion_to_boot.transform_q.z, _x.transform.transform_ego_motion_to_boot.transform_t.x, _x.transform.transform_ego_motion_to_boot.transform_t.y, _x.transform.transform_ego_motion_to_boot.transform_t.z, _x.transform.transform_ego_motion_to_boot.transform_center.x, _x.transform.transform_ego_motion_to_boot.transform_center.y, _x.transform.transform_ego_motion_to_boot.transform_center.z, _x.pose_detail.available, _x.pose_detail.pose_detail_info.available, _x.pose_detail.pose_detail_info.is_keyframe, _x.pose_detail.pose_detail_info.has_scale, _x.pose_detail.pose_detail_info.pose_type, _x.road_lane_id_info.ur_id, _x.road_lane_id_info.tile_id, _x.road_lane_id_info.road_count, _x.road_lane_id_info.lane_id, _x.road_lane_id_info.reserved, _x.reserved.available))
      length = len(self.reserved.reserved_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(struct.Struct(pattern).pack(*self.reserved.reserved_data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.meta is None:
        self.meta = localization_msg.msg.LocLocalizationMeta()
      if self.position is None:
        self.position = localization_msg.msg.LocPosition()
      if self.velocity is None:
        self.velocity = localization_msg.msg.LocVelocity()
      if self.angular_velocity is None:
        self.angular_velocity = localization_msg.msg.LocAngularVelocity()
      if self.orientation is None:
        self.orientation = localization_msg.msg.LocOrientation()
      if self.acceleration is None:
        self.acceleration = localization_msg.msg.LocAcceleration()
      if self.position_std is None:
        self.position_std = localization_msg.msg.LocPositionStd()
      if self.velocity_std is None:
        self.velocity_std = localization_msg.msg.LocVelocityStd()
      if self.angular_velocity_std is None:
        self.angular_velocity_std = localization_msg.msg.LocAngularVelocityStd()
      if self.orientation_std is None:
        self.orientation_std = localization_msg.msg.LocOrientationStd()
      if self.acceleration_std is None:
        self.acceleration_std = localization_msg.msg.LocAccelerationStd()
      if self.status is None:
        self.status = localization_msg.msg.LocStatus()
      if self.transform is None:
        self.transform = localization_msg.msg.LocTransform()
      if self.pose_detail is None:
        self.pose_detail = localization_msg.msg.LocPoseDetail()
      if self.road_lane_id_info is None:
        self.road_lane_id_info = localization_msg.msg.LocRoadLaneIdInfo()
      if self.reserved is None:
        self.reserved = localization_msg.msg.LocReserved()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 780
      (_x.meta.timestamp_us, _x.meta.seq, _x.position.available, _x.position.position_global.x, _x.position.position_global.y, _x.position.position_global.z, _x.position.position_local.x, _x.position.position_local.y, _x.position.position_local.z, _x.velocity.available, _x.velocity.velocity_global.ve, _x.velocity.velocity_global.vn, _x.velocity.velocity_global.vu, _x.velocity.velocity_local.vx, _x.velocity.velocity_local.vy, _x.velocity.velocity_local.vz, _x.angular_velocity.available, _x.angular_velocity.angvelocity_local.vx, _x.angular_velocity.angvelocity_local.vy, _x.angular_velocity.angvelocity_local.vz, _x.orientation.available, _x.orientation.euler_global.roll, _x.orientation.euler_global.pitch, _x.orientation.euler_global.yaw, _x.orientation.quaternion_global.w, _x.orientation.quaternion_global.x, _x.orientation.quaternion_global.y, _x.orientation.quaternion_global.z, _x.orientation.euler_local.roll, _x.orientation.euler_local.pitch, _x.orientation.euler_local.yaw, _x.orientation.quaternion_local.w, _x.orientation.quaternion_local.x, _x.orientation.quaternion_local.y, _x.orientation.quaternion_local.z, _x.acceleration.available, _x.acceleration.acceleration_global.ae, _x.acceleration.acceleration_global.an, _x.acceleration.acceleration_global.au, _x.acceleration.acceleration_local.ax, _x.acceleration.acceleration_local.ay, _x.acceleration.acceleration_local.az, _x.position_std.available, _x.position_std.pos_std_global.std_pe, _x.position_std.pos_std_global.std_pn, _x.position_std.pos_std_global.std_pu, _x.position_std.pos_std_local.std_px, _x.position_std.pos_std_local.std_py, _x.position_std.pos_std_local.std_pz, _x.velocity_std.available, _x.velocity_std.vel_std_global.std_ve, _x.velocity_std.vel_std_global.std_vn, _x.velocity_std.vel_std_global.std_vu, _x.velocity_std.vel_std_local.std_vx, _x.velocity_std.vel_std_local.std_vy, _x.velocity_std.vel_std_local.std_vz, _x.angular_velocity_std.available, _x.angular_velocity_std.angvel_std_local.std_vx, _x.angular_velocity_std.angvel_std_local.std_vy, _x.angular_velocity_std.angvel_std_local.std_vz, _x.orientation_std.available, _x.orientation_std.ori_std_xyz.std_faix, _x.orientation_std.ori_std_xyz.std_faiy, _x.orientation_std.ori_std_xyz.std_faiz, _x.acceleration_std.available, _x.acceleration_std.acc_std_global.std_ae, _x.acceleration_std.acc_std_global.std_an, _x.acceleration_std.acc_std_global.std_au, _x.acceleration_std.acc_std_local.std_ax, _x.acceleration_std.acc_std_local.std_ay, _x.acceleration_std.acc_std_local.std_az, _x.status.available, _x.status.status_info.quality, _x.status.status_info.common, _x.status.status_info.extended, _x.status.status_info.type, _x.transform.available, _x.transform.transform_llh_to_boot.transform_q.w, _x.transform.transform_llh_to_boot.transform_q.x, _x.transform.transform_llh_to_boot.transform_q.y, _x.transform.transform_llh_to_boot.transform_q.z, _x.transform.transform_llh_to_boot.transform_t.x, _x.transform.transform_llh_to_boot.transform_t.y, _x.transform.transform_llh_to_boot.transform_t.z, _x.transform.transform_llh_to_boot.transform_center.x, _x.transform.transform_llh_to_boot.transform_center.y, _x.transform.transform_llh_to_boot.transform_center.z, _x.transform.transform_avp_map_to_boot.transform_q.w, _x.transform.transform_avp_map_to_boot.transform_q.x, _x.transform.transform_avp_map_to_boot.transform_q.y, _x.transform.transform_avp_map_to_boot.transform_q.z, _x.transform.transform_avp_map_to_boot.transform_t.x, _x.transform.transform_avp_map_to_boot.transform_t.y, _x.transform.transform_avp_map_to_boot.transform_t.z, _x.transform.transform_avp_map_to_boot.transform_center.x, _x.transform.transform_avp_map_to_boot.transform_center.y, _x.transform.transform_avp_map_to_boot.transform_center.z, _x.transform.transform_ego_motion_to_boot.transform_q.w, _x.transform.transform_ego_motion_to_boot.transform_q.x, _x.transform.transform_ego_motion_to_boot.transform_q.y, _x.transform.transform_ego_motion_to_boot.transform_q.z, _x.transform.transform_ego_motion_to_boot.transform_t.x, _x.transform.transform_ego_motion_to_boot.transform_t.y, _x.transform.transform_ego_motion_to_boot.transform_t.z, _x.transform.transform_ego_motion_to_boot.transform_center.x, _x.transform.transform_ego_motion_to_boot.transform_center.y, _x.transform.transform_ego_motion_to_boot.transform_center.z, _x.pose_detail.available, _x.pose_detail.pose_detail_info.available, _x.pose_detail.pose_detail_info.is_keyframe, _x.pose_detail.pose_detail_info.has_scale, _x.pose_detail.pose_detail_info.pose_type, _x.road_lane_id_info.ur_id, _x.road_lane_id_info.tile_id, _x.road_lane_id_info.road_count, _x.road_lane_id_info.lane_id, _x.road_lane_id_info.reserved, _x.reserved.available,) = _get_struct_2QB6dB6dB3dB14dB6dB6dB6dB3dB3dB6d2B2Q2B30d5BH3IHB().unpack(str[start:end])
      self.pose_detail.pose_detail_info.is_keyframe = bool(self.pose_detail.pose_detail_info.is_keyframe)
      self.pose_detail.pose_detail_info.has_scale = bool(self.pose_detail.pose_detail_info.has_scale)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved.reserved_data = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2QB6dB6dB3dB14dB6dB6dB6dB3dB3dB6d2B2Q2B30d5BH3IHB().pack(_x.meta.timestamp_us, _x.meta.seq, _x.position.available, _x.position.position_global.x, _x.position.position_global.y, _x.position.position_global.z, _x.position.position_local.x, _x.position.position_local.y, _x.position.position_local.z, _x.velocity.available, _x.velocity.velocity_global.ve, _x.velocity.velocity_global.vn, _x.velocity.velocity_global.vu, _x.velocity.velocity_local.vx, _x.velocity.velocity_local.vy, _x.velocity.velocity_local.vz, _x.angular_velocity.available, _x.angular_velocity.angvelocity_local.vx, _x.angular_velocity.angvelocity_local.vy, _x.angular_velocity.angvelocity_local.vz, _x.orientation.available, _x.orientation.euler_global.roll, _x.orientation.euler_global.pitch, _x.orientation.euler_global.yaw, _x.orientation.quaternion_global.w, _x.orientation.quaternion_global.x, _x.orientation.quaternion_global.y, _x.orientation.quaternion_global.z, _x.orientation.euler_local.roll, _x.orientation.euler_local.pitch, _x.orientation.euler_local.yaw, _x.orientation.quaternion_local.w, _x.orientation.quaternion_local.x, _x.orientation.quaternion_local.y, _x.orientation.quaternion_local.z, _x.acceleration.available, _x.acceleration.acceleration_global.ae, _x.acceleration.acceleration_global.an, _x.acceleration.acceleration_global.au, _x.acceleration.acceleration_local.ax, _x.acceleration.acceleration_local.ay, _x.acceleration.acceleration_local.az, _x.position_std.available, _x.position_std.pos_std_global.std_pe, _x.position_std.pos_std_global.std_pn, _x.position_std.pos_std_global.std_pu, _x.position_std.pos_std_local.std_px, _x.position_std.pos_std_local.std_py, _x.position_std.pos_std_local.std_pz, _x.velocity_std.available, _x.velocity_std.vel_std_global.std_ve, _x.velocity_std.vel_std_global.std_vn, _x.velocity_std.vel_std_global.std_vu, _x.velocity_std.vel_std_local.std_vx, _x.velocity_std.vel_std_local.std_vy, _x.velocity_std.vel_std_local.std_vz, _x.angular_velocity_std.available, _x.angular_velocity_std.angvel_std_local.std_vx, _x.angular_velocity_std.angvel_std_local.std_vy, _x.angular_velocity_std.angvel_std_local.std_vz, _x.orientation_std.available, _x.orientation_std.ori_std_xyz.std_faix, _x.orientation_std.ori_std_xyz.std_faiy, _x.orientation_std.ori_std_xyz.std_faiz, _x.acceleration_std.available, _x.acceleration_std.acc_std_global.std_ae, _x.acceleration_std.acc_std_global.std_an, _x.acceleration_std.acc_std_global.std_au, _x.acceleration_std.acc_std_local.std_ax, _x.acceleration_std.acc_std_local.std_ay, _x.acceleration_std.acc_std_local.std_az, _x.status.available, _x.status.status_info.quality, _x.status.status_info.common, _x.status.status_info.extended, _x.status.status_info.type, _x.transform.available, _x.transform.transform_llh_to_boot.transform_q.w, _x.transform.transform_llh_to_boot.transform_q.x, _x.transform.transform_llh_to_boot.transform_q.y, _x.transform.transform_llh_to_boot.transform_q.z, _x.transform.transform_llh_to_boot.transform_t.x, _x.transform.transform_llh_to_boot.transform_t.y, _x.transform.transform_llh_to_boot.transform_t.z, _x.transform.transform_llh_to_boot.transform_center.x, _x.transform.transform_llh_to_boot.transform_center.y, _x.transform.transform_llh_to_boot.transform_center.z, _x.transform.transform_avp_map_to_boot.transform_q.w, _x.transform.transform_avp_map_to_boot.transform_q.x, _x.transform.transform_avp_map_to_boot.transform_q.y, _x.transform.transform_avp_map_to_boot.transform_q.z, _x.transform.transform_avp_map_to_boot.transform_t.x, _x.transform.transform_avp_map_to_boot.transform_t.y, _x.transform.transform_avp_map_to_boot.transform_t.z, _x.transform.transform_avp_map_to_boot.transform_center.x, _x.transform.transform_avp_map_to_boot.transform_center.y, _x.transform.transform_avp_map_to_boot.transform_center.z, _x.transform.transform_ego_motion_to_boot.transform_q.w, _x.transform.transform_ego_motion_to_boot.transform_q.x, _x.transform.transform_ego_motion_to_boot.transform_q.y, _x.transform.transform_ego_motion_to_boot.transform_q.z, _x.transform.transform_ego_motion_to_boot.transform_t.x, _x.transform.transform_ego_motion_to_boot.transform_t.y, _x.transform.transform_ego_motion_to_boot.transform_t.z, _x.transform.transform_ego_motion_to_boot.transform_center.x, _x.transform.transform_ego_motion_to_boot.transform_center.y, _x.transform.transform_ego_motion_to_boot.transform_center.z, _x.pose_detail.available, _x.pose_detail.pose_detail_info.available, _x.pose_detail.pose_detail_info.is_keyframe, _x.pose_detail.pose_detail_info.has_scale, _x.pose_detail.pose_detail_info.pose_type, _x.road_lane_id_info.ur_id, _x.road_lane_id_info.tile_id, _x.road_lane_id_info.road_count, _x.road_lane_id_info.lane_id, _x.road_lane_id_info.reserved, _x.reserved.available))
      length = len(self.reserved.reserved_data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sQ'%length
      buff.write(self.reserved.reserved_data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.meta is None:
        self.meta = localization_msg.msg.LocLocalizationMeta()
      if self.position is None:
        self.position = localization_msg.msg.LocPosition()
      if self.velocity is None:
        self.velocity = localization_msg.msg.LocVelocity()
      if self.angular_velocity is None:
        self.angular_velocity = localization_msg.msg.LocAngularVelocity()
      if self.orientation is None:
        self.orientation = localization_msg.msg.LocOrientation()
      if self.acceleration is None:
        self.acceleration = localization_msg.msg.LocAcceleration()
      if self.position_std is None:
        self.position_std = localization_msg.msg.LocPositionStd()
      if self.velocity_std is None:
        self.velocity_std = localization_msg.msg.LocVelocityStd()
      if self.angular_velocity_std is None:
        self.angular_velocity_std = localization_msg.msg.LocAngularVelocityStd()
      if self.orientation_std is None:
        self.orientation_std = localization_msg.msg.LocOrientationStd()
      if self.acceleration_std is None:
        self.acceleration_std = localization_msg.msg.LocAccelerationStd()
      if self.status is None:
        self.status = localization_msg.msg.LocStatus()
      if self.transform is None:
        self.transform = localization_msg.msg.LocTransform()
      if self.pose_detail is None:
        self.pose_detail = localization_msg.msg.LocPoseDetail()
      if self.road_lane_id_info is None:
        self.road_lane_id_info = localization_msg.msg.LocRoadLaneIdInfo()
      if self.reserved is None:
        self.reserved = localization_msg.msg.LocReserved()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 780
      (_x.meta.timestamp_us, _x.meta.seq, _x.position.available, _x.position.position_global.x, _x.position.position_global.y, _x.position.position_global.z, _x.position.position_local.x, _x.position.position_local.y, _x.position.position_local.z, _x.velocity.available, _x.velocity.velocity_global.ve, _x.velocity.velocity_global.vn, _x.velocity.velocity_global.vu, _x.velocity.velocity_local.vx, _x.velocity.velocity_local.vy, _x.velocity.velocity_local.vz, _x.angular_velocity.available, _x.angular_velocity.angvelocity_local.vx, _x.angular_velocity.angvelocity_local.vy, _x.angular_velocity.angvelocity_local.vz, _x.orientation.available, _x.orientation.euler_global.roll, _x.orientation.euler_global.pitch, _x.orientation.euler_global.yaw, _x.orientation.quaternion_global.w, _x.orientation.quaternion_global.x, _x.orientation.quaternion_global.y, _x.orientation.quaternion_global.z, _x.orientation.euler_local.roll, _x.orientation.euler_local.pitch, _x.orientation.euler_local.yaw, _x.orientation.quaternion_local.w, _x.orientation.quaternion_local.x, _x.orientation.quaternion_local.y, _x.orientation.quaternion_local.z, _x.acceleration.available, _x.acceleration.acceleration_global.ae, _x.acceleration.acceleration_global.an, _x.acceleration.acceleration_global.au, _x.acceleration.acceleration_local.ax, _x.acceleration.acceleration_local.ay, _x.acceleration.acceleration_local.az, _x.position_std.available, _x.position_std.pos_std_global.std_pe, _x.position_std.pos_std_global.std_pn, _x.position_std.pos_std_global.std_pu, _x.position_std.pos_std_local.std_px, _x.position_std.pos_std_local.std_py, _x.position_std.pos_std_local.std_pz, _x.velocity_std.available, _x.velocity_std.vel_std_global.std_ve, _x.velocity_std.vel_std_global.std_vn, _x.velocity_std.vel_std_global.std_vu, _x.velocity_std.vel_std_local.std_vx, _x.velocity_std.vel_std_local.std_vy, _x.velocity_std.vel_std_local.std_vz, _x.angular_velocity_std.available, _x.angular_velocity_std.angvel_std_local.std_vx, _x.angular_velocity_std.angvel_std_local.std_vy, _x.angular_velocity_std.angvel_std_local.std_vz, _x.orientation_std.available, _x.orientation_std.ori_std_xyz.std_faix, _x.orientation_std.ori_std_xyz.std_faiy, _x.orientation_std.ori_std_xyz.std_faiz, _x.acceleration_std.available, _x.acceleration_std.acc_std_global.std_ae, _x.acceleration_std.acc_std_global.std_an, _x.acceleration_std.acc_std_global.std_au, _x.acceleration_std.acc_std_local.std_ax, _x.acceleration_std.acc_std_local.std_ay, _x.acceleration_std.acc_std_local.std_az, _x.status.available, _x.status.status_info.quality, _x.status.status_info.common, _x.status.status_info.extended, _x.status.status_info.type, _x.transform.available, _x.transform.transform_llh_to_boot.transform_q.w, _x.transform.transform_llh_to_boot.transform_q.x, _x.transform.transform_llh_to_boot.transform_q.y, _x.transform.transform_llh_to_boot.transform_q.z, _x.transform.transform_llh_to_boot.transform_t.x, _x.transform.transform_llh_to_boot.transform_t.y, _x.transform.transform_llh_to_boot.transform_t.z, _x.transform.transform_llh_to_boot.transform_center.x, _x.transform.transform_llh_to_boot.transform_center.y, _x.transform.transform_llh_to_boot.transform_center.z, _x.transform.transform_avp_map_to_boot.transform_q.w, _x.transform.transform_avp_map_to_boot.transform_q.x, _x.transform.transform_avp_map_to_boot.transform_q.y, _x.transform.transform_avp_map_to_boot.transform_q.z, _x.transform.transform_avp_map_to_boot.transform_t.x, _x.transform.transform_avp_map_to_boot.transform_t.y, _x.transform.transform_avp_map_to_boot.transform_t.z, _x.transform.transform_avp_map_to_boot.transform_center.x, _x.transform.transform_avp_map_to_boot.transform_center.y, _x.transform.transform_avp_map_to_boot.transform_center.z, _x.transform.transform_ego_motion_to_boot.transform_q.w, _x.transform.transform_ego_motion_to_boot.transform_q.x, _x.transform.transform_ego_motion_to_boot.transform_q.y, _x.transform.transform_ego_motion_to_boot.transform_q.z, _x.transform.transform_ego_motion_to_boot.transform_t.x, _x.transform.transform_ego_motion_to_boot.transform_t.y, _x.transform.transform_ego_motion_to_boot.transform_t.z, _x.transform.transform_ego_motion_to_boot.transform_center.x, _x.transform.transform_ego_motion_to_boot.transform_center.y, _x.transform.transform_ego_motion_to_boot.transform_center.z, _x.pose_detail.available, _x.pose_detail.pose_detail_info.available, _x.pose_detail.pose_detail_info.is_keyframe, _x.pose_detail.pose_detail_info.has_scale, _x.pose_detail.pose_detail_info.pose_type, _x.road_lane_id_info.ur_id, _x.road_lane_id_info.tile_id, _x.road_lane_id_info.road_count, _x.road_lane_id_info.lane_id, _x.road_lane_id_info.reserved, _x.reserved.available,) = _get_struct_2QB6dB6dB3dB14dB6dB6dB6dB3dB3dB6d2B2Q2B30d5BH3IHB().unpack(str[start:end])
      self.pose_detail.pose_detail_info.is_keyframe = bool(self.pose_detail.pose_detail_info.is_keyframe)
      self.pose_detail.pose_detail_info.has_scale = bool(self.pose_detail.pose_detail_info.has_scale)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sQ'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.reserved.reserved_data = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2QB6dB6dB3dB14dB6dB6dB6dB3dB3dB6d2B2Q2B30d5BH3IHB = None
def _get_struct_2QB6dB6dB3dB14dB6dB6dB6dB3dB3dB6d2B2Q2B30d5BH3IHB():
    global _struct_2QB6dB6dB3dB14dB6dB6dB6dB3dB3dB6d2B2Q2B30d5BH3IHB
    if _struct_2QB6dB6dB3dB14dB6dB6dB6dB3dB3dB6d2B2Q2B30d5BH3IHB is None:
        _struct_2QB6dB6dB3dB14dB6dB6dB6dB3dB3dB6d2B2Q2B30d5BH3IHB = struct.Struct("<2QB6dB6dB3dB14dB6dB6dB6dB3dB3dB6d2B2Q2B30d5BH3IHB")
    return _struct_2QB6dB6dB3dB14dB6dB6dB6dB3dB3dB6d2B2Q2B30d5BH3IHB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
